#+latex_class: cn-article
#+title: Emacs Configuration
#+author: deepwaterooo

* Updates 
** emacs 1 initiliation bug
- emacs 27.1 for emacs-rime input methods. one bug to be fixed. 
  
[[./pic/readme_20230214_134351.png]]
- this affect me access to current terminal, needs to be fixed later. 
** configue pyim wubi input method emacs-rime, works like a charm!
- 不好用：终于是可以造词了，可是，它break 掉了sys里的自动转换输入法，也就是在中英文混合输入时，中英文混合输入时，它就太笨了。。。。。这种情况下没有系统输入法结合sis好用,它与sis不能合作使用 
- 它除了使用了系统输入法的字库，其它所有好用的配置一个也不能用，现在只是可以选詞了而已，却不能使用其它中文下输入英文标点符号等 
- emacs-rime rime 在emacs 里的前端，想要把它配置好：不能自动上屏的五笔输入法显然是太笨了.现在好了，终于有可以自动上屏的五笔输入法了
- 我
** configuration for pdf-tools packages

   [[./pic/mememe2.png]]

- pdf viewer noter <==> Skim bi-directional linking configuration on the way, most emacs work is done. Need to learn how to use them though. 

[[./pic/Snipaste_2023-02-11_20-57-40.png]]
- It has to be configured for M1. But I am still not getting any .tar file yet. 

  [[./pic/Snipaste_2023-02-11_22-20-25.png]]
- could customer F5 toggle sr-speedbar, and make sis-mode work. But I do NOT really need sis-mode, only needed macism command line. to help [LOVE MY DEAR COUSIN!!!]

[[./pic/readme_20230210_221127.png]]
- finally sync up with csharp-mode with tree-sitter, and fixed added the other's that gio-mode etc. 
- Permanently diabled speedbar-edit-file's set-timer function call from Resource files. Do NOT want to see such a bug, don't know how to fix, but disable it and walk around. 
- Now have a relatively barable and stable colorful emacs code editor now, at least for csharp-mode. Relatively satisfied now. Could sit it aside for a while now to focus on projects.
** invalid time specification: sr-speedbar on MacOS
- I don't like this bug, and I belive I do NOT really using any timer for auto-refresh in my speedbar. So I ended up by disabling the (speedbar-edit-file() func, which is frequently bug trigered) setting timer part from /Applications/Emacs.app/Contents/Resources/lisp/speedbar.el.gz, and recompile the file. The bug was gone. And I could deal with csharp-mode's fontify bug. 
- newer debugging infos, concernibg about sr-speedbar.el file. Have NOT been able to trace down for today. 

[[./pic/readme_20230209_135039.png]]
- 好像是macOS系统常常存在的 bug,两年了关了又开，开了再关......
- https://github.com/remacs/remacs/issues/845
- get cmake work later, not urgent though.Complete
- babel org-mode so I don't have to copy from specific babeled source org-mode files in order for chinese characters to work. 
- Installed my emacs of version 28.1. But there is a bug of any verison emacs > 27.1, and I am NOT able to find a installable emacs 27.1 version any more. 
- 不同电脑架构上可能因为架构的不同，可以可能可以有某些优化.又照一个单做了一遍，似乎没有出错. https://goykhman.ca/gene/blog/2022/2022-04-10-emacs-28.1-on-m1.html
- 但是我没有没能加入那个补丁包.暂时没能想好怎么加入那个补丁包. （ *todo： 改天可以尝试再把这个补丁包加进去* ）
- 因为构建是在原有现有的 mac 28.1.1版本上构建的.所以改动什么，或是不曾改变，又或者改不了不影响明显功能都是无从知晓的，但是它最后的两个步骤的验证都是成功的，应该还是构建成功了吧？
  
[[./pic/readme_20230208_142554.png]]
- 今天又尝试安装Xcode之后再构建一遍，但是没有成功.可能本身参考有些年代，另外自己还完全不通这个部分，所以暂时放一放.改天有机会可以再回来研究一下，错在哪里，我如何才可能构建出自己的版本. 

[[./pic/readme_20230208_102317.png]]
- 上面又成为一个需要改的东西： 就是系统下如何从剪贴板自动生成写入文件 org-mode M-s
- 然后看见这里说可以自己构建一个，连Xcode也没有安装，就跑去构建了，当然不成功。这段时间太忙，XCode要的空间太大了，暂时还不想。等改天有机会的时候倒是可以一试的
  - https://stuff-things.net/2020/12/28/building-emacs-27-dot-1-on-macos-big-sur/
- added key-bindings for opening from VSCode/Android Studio of current emacs buffer. 
  - VSC Emacs can locate to each othr to correct row and col. 
  - Android Studio could open current emacs buffer. but not to the row nor col. 
- I liked recently configued Visual studio 2019 one-dark-pro theme, want to configue it for emacs, but ended up with any permission denied, renaming emacs initiating bug. reverted back for daily use, and may look into that bug for later reference. 
- will reconfigure one-dark-pro theme later.  
- fixed legency java-mode highlighing issue which I did not fix for years. Has been able to treat java-mode as java-mode Instead of using it as csharp-mode. Can not separate java-mode snippets from csharp-mode's.  
** BUG statement and partial fix
- in java-mode, the code style I expected is as followed:
#+BEGIN_SRC java
class node {
    int v ;
    public node() {
        if (a > 0) // I don't want { } blocks when I have only one line statement inside blocks
     // a = 17;    // before fix:
            a = 17;   // now it can auto-indent
        b = 20;
        while (true)  // same auto indents here
            j++;
    }
}
class dklfjdj {|} // <<==== current un-auto-expanded version, bug right now for java-mode
class dklfjdj { 
    | // <<==== expected feature: once I typed '{', '}' will be autopaired(it does), but also auto-expand and cursor moves and indents directly to where I expect
}
#+END_SRC
- if while if while one line statement autoindent without {} fixed today for java-mode, but for kotlin-mode, this bug consists, make coders/programmers nuts.
#+BEGIN_SRC java
fun getStringLength(obj: Any): Int? {
    if (obj is String)
    return obj.length  // <<<<===== BUG: need to fix auto-indent here for if else while etc without {} 

    if (obj is String) {
        return obj.length
    }
    // 在离开类型检测分支后，`obj` 仍然是 `Any` 类型
    return null
}
fun dslfkj { // kotlin-mode, unlike java-mode, this feature works charming
    val a = 1720 
}
#+END_SRC
        - The {|} can NOT auto-expand still bugs me a lot, I don't want to switch back to java-mode yet unless bug fixed and it auto-pands.
        - java minor bug: Debugger entered--Lisp error: (void-function company-clear-completion-rules): this bug I will look into it recently, and expect it to be fixed so I could switch java-mode from csharp-mode as soon as possible.
- *csharp-mode* has been the one that works perfectly for these two features, {} auto expand, also if while one line statement autoindent without {}, so I used csharp-mode as java mode.
* References
- https://github.com/redguardtoo/emacs.d
