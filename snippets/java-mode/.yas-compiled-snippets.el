;;; Compiled snippets and support files for `java-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'java-mode
                     '(("xy" "$1[x][y]$0" "[x][y]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/xy" nil nil)
                       ("wio" "while ($1) $0" "wio" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/wio" nil nil)
                       ("wie" "while (!${1:q}.isEmpty()) {\n    $0\n}" "while (!s.isEmpty())" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/wie" nil nil)
                       ("wi" "while ($1) {\n    $0\n}" "wi" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/wi" nil nil)
                       ("weo" "while (!${1:q}.isEmpty()) $0" "while (!q.isEmpty())" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/weo" nil nil)
                       ("wea" "while (!${1:q}.isEmpty() && $2) $0" "while (!q.isEmpty() && )" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/wea" nil nil)
                       ("void" "void $0" "void" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/void" nil nil)
                       ("val" "final ${1:int} ${2:n} = $0;" "value" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/value" nil nil)
                       ("tt" "Toast.makeText(this, $1, Toast.LENGTH_${2:SHORT}).show();\n$0" "Toast.makeText()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tt" nil nil)
                       ("tv" "this.$1 = $1; $0" "this.v = v;" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tsv" nil nil)
                       ("tss" "TreeSet<String> ${1:ts} = new TreeSet<>();\n$0\n" "TreeSet<String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tss" nil nil)
                       ("tsi" "TreeSet<Integer> ${1:ts} = new TreeSet<>();\n$0\n" "TreeSet<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tsi" nil nil)
                       ("ts" "toString()$0" "toString()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ts" nil nil)
                       ("tryf" "try {\n    $0\n} finally {\n}\n" "try, finally" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tryf" nil nil)
                       ("trycf" "try {\n    $0\n} catch (${1:Exception} ${2:ex}) {\n} finally {\n}\n" "try, catch" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/trycf" nil nil)
                       ("tryc" "try {\n    $0\n} catch (${1:Exception} ${2:ex}) {\n}\n" "try, catch" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tryc" nil nil)
                       ("try" "try {\n    $0\n} catch (${1:InterruptedException} e) {\n      ${2:System.out.println(\"Error \" + e.getMessage());\n      e.printStackTrace();}\n}\n" "try" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/try" nil nil)
                       ("toStr" "public String toString() {\n       $0\n}" "toString" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/toString" nil nil)
                       ("tni" "TreeNode ${1:curr} = new TreeNode(${2:a[0]})$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tni" nil nil)
                       ("tn" "TreeNode ${1:curr} = ${2:null}$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tn" nil nil)
                       ("tmsi" "TreeMap<String, Integer> ${1:m} = new TreeMap<>();\n$0\n" "TreeMap<String, Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tmsi" nil nil)
                       ("tmil" "TreeMap<Integer, List<Integer>> ${1:m} = new TreeMap<>();\n$0\n" "TreeMap<Integer, List<Integer>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tmil" nil nil)
                       ("tmii" "TreeMap<Integer, Integer> ${1:m} = new TreeMap<>();\n$0\n" "TreeMap<Integer, Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tmii" nil nil)
                       ("tlni" "TreeLinkNode ${1:root} = new TreeLinkNode(${2:a}[0]);\n$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tlni" nil nil)
                       ("tln" "TreeLinkNode ${1:curr} = ${2:null};\n$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tln" nil nil)
                       ("tle" "// TLE TLE TLE: $0" "TLE" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tle" nil nil)
                       ("." "this.$1 = $1;\n$0" "this" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/this" nil nil)
                       ("tc" "import junit.framework.*;\nimport junit.textui.*;\n\npublic class Test${1:Class} extends TestCase {\n       protected void setUp() {\n                 $0\n       }\n}" "testClass" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/testClass" nil nil)
                       ("test" "@Test\npublic void test_${1:Case}() {\n       $0\n}" "test" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/test" nil nil)
                       ("td" "// TODO TODO TODO: $0" "TODO" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/td" nil nil)
                       ("tca" "toCharArray()$0" "s.toCharArray()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tca" nil nil)
                       ("tag" "private final String TAG = \"${1:Obj}\";\n$0" "TAG" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/tag" nil nil)
                       ("sync" "synchronized (${1:this} {\n    $0\n}\n" "synchronized" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sync" nil nil)
                       ("swi" "switch ($1) {\n    case $2:\n        $4\n        break;\n    case $3:\n        $5\n        break;\n    default:\n        $6\n}" "switch" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/swi" nil nil)
                       ("svo" "String.valueOf(${1:v})$0" "String.valueOf()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/svo" nil nil)
                       ("str" "String $0\n" "String" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/str" nil nil)
                       ("sti" "Stack<Integer> ${1:s} = new Stack<>();\n$0\n" "Stack<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sti" nil nil)
                       ("stc" "Stack<Character> ${1:s} = new Stack<>();\n$0\n" "Stack<Character>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/stc" nil nil)
                       ("static" "static $0" "static" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/static" nil nil)
                       ("st" "String ${1:a} = $2;$0\n" "String a = ;" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/st" nil nil)
                       ("ssc" "${1:s}.setCharAt(${2:i}, ${3:c});\n$0" "s.setCharAt(i, c)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ssc" nil nil)
                       ("ss" "substring(${1:i})$0" "s.substring()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ss" nil nil)
                       ("srr" "String [][] ${1:s} = {$0};\n" "String [][] ${1:s} = {$0};" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/srr" nil nil)
                       ("sr" "String [] ${1:s} = {${2}};\n$0" "String [] ${1:s} = {$0};" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sr" nil nil)
                       ("sqrt" "Math.sqrt(${1:v})$0" "Math.sqrt(" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sqrt" nil nil)
                       ("spa" "System.arraycopy(${1:src}, 0, ${2:dst}, 0, ${3:n});\n$0" "System.arraycopy()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/spa" nil nil)
                       ("sleep" "try {\n    Thread.sleep(${1:1000});\n} catch (InterruptedException ignore) { }\n$0\n" "Thread.sleep()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sleep" nil nil)
                       ("sio" "${1:s}.indexOf(\"${2:v}\")$0" "String.indexOf()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sio" nil nil)
                       ("si" "Set<Integer> $0" "Set<Integer> 0" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/si" nil nil)
                       ("sdc" "${1:s}.deleteCharAt(${2:$1.length()-1});$0" "s.deleteCharAt()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sdc" nil nil)
                       ("sca" "${1:s}.charAt(${2:i})$0" "s.charAt()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sca" nil nil)
                       ("sbv" "StringBuilder ${1:s} = new StringBuilder($2);\n$0\n" "StringBuilder Variable" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sbv" nil nil)
                       ("sb" "StringBuilder ${1:s}$0" "StringBuilder s" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sb" nil nil)
                       ("sap" "${1:s}.append(${2:i})$0" "s.append()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sap" nil nil)
                       ("sa" "String [] ${1:a} = new String [] {$2};\n$0\n" "String [] a = new String [] {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/sa" nil nil)
                       ("rt" "return true$0" "rt" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/rt" nil nil)
                       ("rni" "RandomListNode ${1:head} = new RandomListNode(${2:a[0]});\n$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/rni" nil nil)
                       ("rn" "return $0" "return" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/rn" nil nil)
                       ("rf" "return false$0" "rf" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/rf" nil nil)
                       ("res" "TreeNode res = s.${1: }(${2:root});\nres.levelPrintTree(res);\n$0\n" "TreeNode res = s." nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/res" nil nil)
                       ("ras" "int [] ${1:sorted} = Arrays.stream(${2:a}).boxed()\n.sorted(${3:Comparator.reverseOrder()}) // just use 'sorted()' for ascending order\n.mapToInt(Integer::intValue).toArray();\n$0\n" "reverse Arrays.sort(arr, )" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ras" nil nil)
                       ("qt" "Deque<TreeNode> ${1:q} = new ArrayDeque<>();\n$0\n" "Queue<TreeNode>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/qt" nil nil)
                       ("qs" "Deque<String> ${1:q} = new ArrayDeque<>();\n$0\n" "Queue<String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/qs" nil nil)
                       ("qie" "while (!${1:q}.isEmpty()) $0" "while (!s.isEmpty())" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/qie" nil nil)
                       ("qia" "Deque<int []> ${1:q} = new ArrayDeque<>();\n$0\n" "Queue<int []>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/qia" nil nil)
                       ("qi" "Deque<Integer> ${1:q} = new ArrayDeque<>();\n$0\n" "Queue<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/qi" nil nil)
                       ("qc" "Deque<Character> ${1:q} = new ArrayDeque<>();\n$0\n" "Queue<Character>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/qc" nil nil)
                       ("pvn" "System.out.println(\"\\n ${1:i}: \" + $1);$0\n" "printlVariables NewLine" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pvn" nil nil)
                       ("pvia" "for (int [] zz : ${1:s}) \n    System.out.println(Arrays.toString(zz));\n$0\n" "pvia" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pvia" nil nil)
                       ("pvbn" "System.out.println(\"\\n Integer.toBinaryString(${1:i}): \" + Integer.toBinaryString($1));$0" "printlVariables BinaryString newline" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pvbn" nil nil)
                       ("pvb" "System.out.println(\"Integer.toBinaryString(${1:i}): \" + Integer.toBinaryString($1));\n$0\n" "printlVariables BinaryString" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pvb" nil nil)
                       ("pv" "System.out.println(\"${1:i}: \" + $1);$0\n" "printlVariables" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pv" nil nil)
                       ("public" "public $0" "public" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/public" nil nil)
                       ("ptl" "System.out.println(\"${1:i}\");$0" "printline" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ptl" nil nil)
                       ("pt" "${1:root}.levelPrintTree($1);\n$0" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pt" nil nil)
                       ("psti" "System.out.println(\"$1.size(): \" + $1.size());\nSystem.out.println(Arrays.toString(${1:s}.toArray()));\n$0\n" "psti" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/psti" nil nil)
                       ("psr" "System.out.println(\"\");\nfor(String i : ${1})\n    System.out.print(i + \", \");\nSystem.out.println(\"\");\n$0\n" "print int arr" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/psr" nil nil)
                       ("psi" "System.out.println(\"$1.size(): \" + $1.size());\nSystem.out.println(Arrays.toString(new ArrayList<>($1).toArray()));\n$0\n" "psi" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/psi" nil nil)
                       ("psf" "public static ${1:void} ${2:set}($3) {\n    $0\n}" "public static func" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/psf" nil nil)
                       ("prt" "System.out.println(\"${1:func}\");\n$0" "println text" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/prt" nil nil)
                       ("prr" "System.out.println(\"\");\nfor (int i = 0; i < ${1:a}.length; i++) {\n    for (int j = 0; j < $1[0].length; j++) \n        System.out.print($1[i][j] + \", \");\n    System.out.println(\"\");\n}\n$0\n" "for (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/prr" nil nil)
                       ("protected" "protected $0" "protected" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/protected" nil nil)
                       ("prop" "private ${1:String} ${2:name};\n\npublic $1 get${2:$(upcase-initials text)}() {\n    return $2;\n}\n\npublic void set${2:$(upcase-initials text)}($1 $2) {\n    this.$2 = $2;\n}\n" "prop" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/prop" nil nil)
                       ("private" "private $0" "private" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/private" nil nil)
                       ("printf" "System.out.printf(\"$0%n\");" "printf" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/printf" nil nil)
                       ("pr" "Console.WriteLine(\"${1:a}: \");\n$0" "System.Console.WriteLine()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pr" nil nil)
                       ("pqs" "Queue<String> ${1:q} = new PriorityQueue<>();\n$0\n" "PriorityQueue<String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pqs" nil nil)
                       ("pqia" "Queue<int []> ${1:q} = new PriorityQueue<>((x, y) -> $2);\n$0\n" "PriorityQueue<int []>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pqia" nil nil)
                       ("pqi" "Queue<Integer> ${1:q} = new PriorityQueue<>($2);\n$0\n" "PriorityQueue<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pqi" nil nil)
                       ("pqc" "Queue<Character> ${1:q} = new PriorityQueue<>();\n$0\n" "PriorityQueue<Character>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pqc" nil nil)
                       ("ppt" "${1:root}.preOrderPrintTree($1);\n$0" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ppt" nil nil)
                       ("pol" "pollLast()$0" "pollLast()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pol" nil nil)
                       ("pof" "pollFirst()$0" "pollFirst()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pof" nil nil)
                       ("pmvk" "System.out.println(\"\");\nSystem.out.println(\"${2:m}.size(): \" + $2.size());\nfor (Map.Entry<${1:Integer, Integer}> entry : $2.entrySet()) \n    System.out.print(entry.getKey() + \", \" + entry.getValue() + \"\\n\");\nSystem.out.println(\"\");\n$0\n" "print map  value key pair" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pmvk" nil nil)
                       ("pmv" "System.out.println(\"$1.size(): \" + $1.size());\nSystem.out.println(Arrays.toString(new ArrayList<>(${1:m}.values()).toArray()));\n$0\n" "print Map.Values()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pmv" nil nil)
                       ("pmkv" "System.out.println(\"\");\nSystem.out.println(\"${2:m}.size(): \" + $2.size());\nfor (Map.Entry<${1:Integer, Integer}> entry : $2.entrySet()) \n    System.out.print(entry.getKey() + \", \" + entry.getValue() + \"\\n\");\nSystem.out.println(\"\");\n$0\n" "print map Key Value pair" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pmkv" nil nil)
                       ("pmk" "System.out.println(\"$1.size(): \" + $1.size());\nSystem.out.println(Arrays.toString(new ArrayList<>(${1:m}.keySet()).toArray()));\n$0\n" "print Map Keys" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pmk" nil nil)
                       ("pmil" "System.out.println(\"$1.size(): \" + $1.size());\nfor (Map.Entry<Integer, List<Integer>> en : ${1:m}.entrySet()) {\n    System.out.print(en.getKey() + \": \");\n    System.out.println(Arrays.toString(en.getValue().toArray()));\n}\n$0\n" "print HashMap<Integer, List<Integer>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pmil" nil nil)
                       ("pmii" "System.out.println(\"${2:m}.size(): \" + $2.size());\nfor (Map.Entry<${1:Integer, Integer}> en : $2.entrySet()) \n    System.out.print(en.getKey() + \", \" + en.getValue() + \"\\n\");\n$0" "print HashMap<Integer, Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pmii" nil nil)
                       ("pmia" "System.out.println(\"${2:m}.size(): \" + $2.size());\nfor (Map.Entry<${1:Integer, int []}> en : $2.entrySet()) {\n    System.out.print(en.getKey() + \": \");\n    System.out.println(Arrays.toString(en.getValue()));\n}$0\n" "print HashMap<Integer, int []>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pmia" nil nil)
                       ("plst" "System.out.println(\"\");\nfor (int i = 0; i < ${1:res}.size(); ++i) {\n    System.out.print($1.get(i) + \", \");\n}\nSystem.out.println(\"\");\n$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/plst" nil nil)
                       ("pln" "${1:head}.printList($1);\n$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pln" nil nil)
                       ("pll" "System.out.println(\"${1:ll}.size(): \" + $1.size());\nfor (int z = 0; z < $1.size(); ++z) \n    System.out.println(Arrays.toString($1.get(z).toArray()));\n$0" "print List<List<Integer>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pll" nil nil)
                       ("pli" "System.out.println(\"${1:res}.size(): \" + $1.size());\nfor (int z = 0; z < $1.size(); ++z)\n    System.out.println(Arrays.toString($1.get(z)));\n$0" "print List<int []>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pli" nil nil)
                       ("pl" "System.out.println(\"${1:l}.size(): \" + $1.size());\nSystem.out.println(Arrays.toString($1.toArray()));\n$0" "print <List<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pl" nil nil)
                       ("pkl" "peekLast()$0" "peekLast()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pkl" nil nil)
                       ("pkf" "peekFirst()$0" "peekFirst()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pkf" nil nil)
                       ("pir" "System.out.println(\"\");\nfor(int val : ${1})\n    System.out.print(val + \", \");\nSystem.out.println(\"\");\n$0\n" "print int arr" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pir" nil nil)
                       ("pia" "putIfAbsent(${1:v}, new ${2:ArrayList}<>());\n$0" "putIfAbsent()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pia" nil nil)
                       ("pf" "System.out.println(\"${1:}: \");\n$0\n" "System.out.println()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pf" nil nil)
                       ("pcr" "System.out.println(\"\");\nfor(char i : ${1})\n    System.out.print(i + \", \");\nSystem.out.println(\"\");\n$0\n" "print int arr" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pcr" nil nil)
                       ("param" "@param ${1:paramater} $0" "param" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/param" nil nil)
                       ("paii" "System.out.println(\"${1:a}.length: \" + $1.length);\nfor (int z = 0; z < $1.length; ++z) \n    System.out.println(Arrays.toString($1[z]));\n$0" "print int [][] arr" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/paii" nil nil)
                       ("pai" "System.out.println(Arrays.toString(${1:a}));\n$0" "print int []" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/pai" nil nil)
                       ("package" "package $0;\n" "package" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/package" nil nil)
                       ("ou" "System.out.print(${1} + \", \");\n" "system.out.print(\"${1}\" + \", \");" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ou" nil nil)
                       ("one" "System.out.print(${1} + \", \");\n$0" "system.out.println(\"got here\");" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/one" nil nil)
                       ("ofl" "offerLast(${1:a})$0" "offerLast()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ofl" nil nil)
                       ("off" "offerFirst(${1:a})$0" "offerFirst()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/off" nil nil)
                       ("o" "@Override $0" "override" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/o" nil nil)
                       ("nn" "!= null$0" "notEqualstoNull" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/nn" nil nil)
                       ("nl" "int ${1:n} = ${2:s}.length$3;\n$0" "n = length;" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/nl" nil nil)
                       ("nfckat" "if (!${1:map}.containsKey(${2:s}.charAt(${3}))) {\n    $0\n}" "if (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/nfckt" nil nil)
                       ("nfck" "if (!${1:map}.containsKey(${2})) {\n    $0\n}" "if (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/nfck" nil nil)
                       ("new" "${1:Object} ${2:name} = new $1($3);\n$0\n" "new" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/new" nil nil)
                       ("mti" "Map<TreeNode, Integer> ${1:m} = new HashMap<>();\n$0\n" "HashMap<TreeNode, Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mti" nil nil)
                       ("mss" "Map<String, String> ${1:m} = new HashMap<>();\n$0\n" "HashMap<String, String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mss" nil nil)
                       ("msr" "Math.sqrt(${1:v})$0" "Math.sqrt()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/msr" nil nil)
                       ("msi" "Map<String, Integer> ${1:m} = new HashMap<>();\n$0\n" "HashMap<String, Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/msi" nil nil)
                       ("ms" "Map<${1:Integer, Integer}> ${2:tmp} = ${3:m}.entrySet().stream()\n    .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder())) \n    .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (a, b) -> a, LinkedHashMap::new));\n$0\n" "map sort" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ms" nil nil)
                       ("mp" "Math.pow(${1:10}, ${2})$0" "mp" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mp" nil nil)
                       ("mod" "static final int mod = (int)1e9 + 7;$0" "mod" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mod" nil nil)
                       ("mn" "int ${1:m} = ${2:s}.length$3, ${4:n} = ${5:t}.length$6;\n$0\n" "m = length, n = length" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mn" nil nil)
                       ("mmi" "Math.min(${1:a}, ${2:b})$0" "Math.min(" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mmi" nil nil)
                       ("mma" "Math.max(${1:a}, ${2:b})$0" "Math.max(" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mma" nil nil)
                       ("mm" "% mod$0" "% mod" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mm" nil nil)
                       ("mlt" "Math.log(${1})$0" "mlt" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mlt" nil nil)
                       ("miss" "Map<Integer, Set<String>> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Integer, Set<String>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/miss" nil nil)
                       ("misi" "Map<Integer, Set<Integer>> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Integer, Set<Integer>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/misi" nil nil)
                       ("mis" "Map<Integer, String> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Integer, String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mis" nil nil)
                       ("mil" "Map<Integer, List<Integer>> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Integer, List<Integer>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mil" nil nil)
                       ("miia" "Map<Integer, int []> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Integer, int []>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/miia" nil nil)
                       ("mii" "Map<Integer, Integer> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Integer, Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mii" nil nil)
                       ("mib" "Map<Integer, Boolean> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Integer, Boolean>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mib" nil nil)
                       ("mia" "Math.min(Math.max(${1:a}, ${2:b}),\n         Math.max($1, ${3:c}));\n$0" "Math.min(max(),max());" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mia" nil nil)
                       ("mf" "Math.floor(${1})$0" "mf" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mf" nil nil)
                       ("m" "${1:public} ${2:void} ${3:name}(${4:args}) {\n            $0\n}" "method" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/method" nil nil)
                       ("mck" "${1:m}.containsKey(${2:k})$0" "map.containsKey()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mck" nil nil)
                       ("mci" "Map<Character, Integer> ${1:m} = new HashMap<>();\n$0\n" "HashMap<Character, Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mci" nil nil)
                       ("mc" "Math.ceil(${1})$0" "mc" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mc" nil nil)
                       ("maine" "public static void main(String[] args) throws Exception {\n    $0\n}\n" "public static void main (String[] args) throws Exception { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/maine" nil nil)
                       ("main_class" "class `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`\n{\npublic static void main(String args[])\n{\n$0\n}\n}" "main_class" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/main_class" nil nil)
                       ("main" "public static void main(String[] args) {\n    $0\n}\n" "public static void main (String[] args) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/main" nil nil)
                       ("mai" "Math.max(Math.min(${1:a}, ${2:b}),\n         Math.min($1, ${4:c}));\n$0" "Math.max(min(),min());" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mai" nil nil)
                       ("mabi" "Math.abs(Math.min(${1:a}, ${2:b}),\n         Math.min($1, ${3:c}));\n$0" "Math.max(max(),max());" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mabi" nil nil)
                       ("maba" "Math.abs(Math.max(${1:a}, ${2:b}),\n         Math.max($1, ${3:c}));\n$0" "Math.max(max(),max());" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/maba" nil nil)
                       ("mab" "Math.abs(${1:a})$0" "Math.abs(" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/mab" nil nil)
                       ("maa" "Math.max(Math.max(${1:a}, ${2:b}),\n         Math.max($1, ${3:c}));\n$0" "Math.max(max(),max());" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/maa" nil nil)
                       ("lv" "Log.d(TAG, \"${1:v}: \" + $1);\n$0\n" "Log.dv" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lv" nil nil)
                       ("ltn" "List<TreeNode> ${1:l} = new ArrayList<>();\n$0\n" "List<TreeNode> l = new ArrayList<>();" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ltn" nil nil)
                       ("lt" "$1.levelPrintTree($1);\n$0\n" "levelPrintTree" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lt" nil nil)
                       ("lss" "${1:l}.stream().collect(Collectors.summingInt(Integer::intValue));$0" "List.stream().sum()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lss" nil nil)
                       ("ls" "List<String> ${1:l} = new ArrayList<>();\n$0\n" "List<String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ls" nil nil)
                       ("lpt" "TreeNode ${1:res} = s.$2(root$3);\n$1.levelPrintTree($1);\n$0" "TreeNode res" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lpt" nil nil)
                       ("lpl" "Long.parseLong(${1:s})$0" "Long.parseLong()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lpl" nil nil)
                       ("lni" "ListNode ${1:head} = new ListNode(${2:a[0]})$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lni" nil nil)
                       ("ln" "ListNode ${1:curr} = ${2:null}$0\n" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ln" nil nil)
                       ("lmi" "Long.MIN_VALUE$0" "lmi" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lmi" nil nil)
                       ("lma" "Long.MAX_VALUE$0" "lma" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lma" nil nil)
                       ("lm" "System.out.println(\"\");\n" "system.out.println(\"\");" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lm" nil nil)
                       ("lls" "List<List<String>> ${1:lls} = new ArrayList<>();\n$0\n" "List<List<String>> lls" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lls" nil nil)
                       ("lli" "List<List<Integer>> ${1:ll} = new ArrayList<>();\n$0\n" "List<List<Integer>> ll" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lli" nil nil)
                       ("lii" "List<Integer> $0" "List<Integer> 0" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lii" nil nil)
                       ("lia" "List<int []> ${1:l} = new ArrayList<>();\n$0\n" "List<int []>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lia" nil nil)
                       ("li" "List<Integer> ${1:l} = new ArrayList<>();$0" "List<Integer> l = new ArrayList<>();" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/li" nil nil)
                       ("ld" "Log.d(TAG, \"${1: }() $2\");\n$0" "Log.d" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ld" nil nil)
                       ("lcy" "@Override protected void ${1:}() {\n    super.$1();\n    Log.d(TAG, \"$1()\");\n}\n$0\n" "lifecycle" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lcy" nil nil)
                       ("lc" "List<Character> ${1:l} = new ArrayList<>();\n$0\n" "List<Character>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lc" nil nil)
                       ("lbs" "Long.toBinaryString(${1:s})$0" "Long.toBinaryString()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lbs" nil nil)
                       ("\\" "(${1:args}) -> ${2:expression};" "lambda" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/lambda" nil nil)
                       ("kd" "[k-1]$0" "[k-1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/kd" nil nil)
                       ("ka" "[k+1]$0" "[k+1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ka" nil nil)
                       ("jjj" "import com.TreeNode;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.util.*;\n\npublic class $1 {\n    public static class Solution {\n\n        $0\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n\n        int [] a = new int [] {$2};\n        TreeNode root = new TreeNode(a[0]);\n        root.buildTree(root, a);\n        root.levelPrintTree(root);\n\n        TreeNode res = s.$3(root${4: });\n        res.levelPrintTree(res);\n    }\n}" "java leetcode template" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/jjj" nil nil)
                       ("jj" "import com.TreeNode;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.ArrayList;\nimport java.util.*;\n\npublic class $1 {\n    public static class Solution {\n\n        $0\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n\n        int [][] a = new int [][] {$2};\n\n        TreeNode res = s.$3(root${4: });\n        System.out.println(\"res: \" + res);\n    }\n}" "java leetcode template" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/jj" nil nil)
                       ("jd" "[j-1]$0" "[j-1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/jd" nil nil)
                       ("doc" "/**\n * $0\n *\n */" "javadoc" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/javadoc" nil nil)
                       ("ja" "[j+1]$0" "[j+1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ja" nil nil)
                       ("its" "Integer.toString(${1:v})$0" "Integer.toString" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/its" nil nil)
                       ("iterator" "public Iterator<${1:type}> iterator() {\n       $0\n}\n" "iterator" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/iterator" nil nil)
                       ("it" "Iterator<Map.Entry<${1:Integer, Integer}>> it = ${2:map}.entrySet().iterator();\nwhile (it.hasNext()) {\n    $0\n}" "Iterator<Map.Entry<Integer, Integer>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/it" nil nil)
                       ("isr" "IntStream.rangeClosed(0, n-1).map(z->arr[n-1-z]).toArray();\n$0\n" "IntStream.rangeClosed.toArray()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/isr" nil nil)
                       ("isl" "IntStream.rangeClosed(0, n-1).mapToObj(z->${1:arr}[z]).collect(Collectors.toList());\n$0\n" "IntStream.rangeClosed.toList()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/isl" nil nil)
                       ("isa" "IntStream.range(0, ${1:n}).boxed().toArray(Integer[]::new);$0" "IntStream.range(0, n).boxed().toArray(Integer[]::new)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/isa" nil nil)
                       ("irr" "int [][] ${1:a} = {$0};\n\n" "Int [][] ${1:s} = {$0};" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/irr" nil nil)
                       ("ir" "int [] ${1:a} = new int [] {$2};$0\n" "int [] a = new int [] {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ir" nil nil)
                       ("ipi" "Integer.parseInt(${1:s})$0" "Integer.parseInt()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ipi" nil nil)
                       ("inpt" "${1:root}.inOrderPrintTree($1);\n$0" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/inpt" nil nil)
                       ("inn" "[n][n];$0" "[n][n]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/inn" nil nil)
                       ("import" "import $0;\n" "import" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/import" nil nil)
                       ("implements" "implements $0" "implements" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/implements" nil nil)
                       ("imn" "[m][n];$0" "[m][n]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/imn" nil nil)
                       ("imi" "Integer.MIN_VALUE$0" "imi" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/imi" nil nil)
                       ("ima" "Integer.MAX_VALUE$0" "ima" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ima" nil nil)
                       ("ik" "[i][j][k]$0" "[i][j][k]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ik" nil nil)
                       ("iju" "import java.util.${1};\n$0\n" "import" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/iju" nil nil)
                       ("ij" "$1[i][j]$0" "[i][j]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ij" nil nil)
                       ("ii" "$1[i][i]$0" "[i][i]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ii" nil nil)
                       ("ifo" "if (${1:condition}) \n    $0" "ifOneLine" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ifo" nil nil)
                       ("ifee" "if (${1:condition}) {\n    $2\n} else if (${3:condition}) {\n    $4\n} else {\n    $5\n}\n" "if, else if, else" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ifee" nil nil)
                       ("ife" "if (${1:condition}) {\n    $2\n} else {\n    $3\n}" "if, else" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ife" nil nil)
                       ("if" "if (${1:condition}) {\n    $0\n}" "if" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/if" nil nil)
                       ("ie" "isEmpty()$0" "ie" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ie" nil nil)
                       ("id" "[i-1]$0" "[i-1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/id" nil nil)
                       ("ict" "import com.TreeNode;\n$0\n" "import" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ict" nil nil)
                       ("icr" "import com.RandomListNode;\n$0\n" "import" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/icr" nil nil)
                       ("icl" "import com.ListNode;\n$0\n" "import" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/icl" nil nil)
                       ("ic" "Integer.compare($1)$0" "Integer.compare()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ic" nil nil)
                       ("ibs" "Integer.toBinaryString(${1:s})$0" "Integer.toBinaryString()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ibs" nil nil)
                       ("ibc" "Integer.bitCount(${1:v})$0" "Integer.bitCount()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ibc" nil nil)
                       ("iav" "int [] $1 = $0" "int []" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/iav" nil nil)
                       ("ia" "[i+1]$0" "[i+1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ia" nil nil)
                       ("hss" "Set<String> ${1:ss} = new HashSet<>();\n$0\n" "HashSet<String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/hss" nil nil)
                       ("hsls" "Set<List<String>> ${1:ss} = new HashSet<>();\n$0\n" "HashSet<List<String>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/hsls" nil nil)
                       ("hsli" "Set<List<Integer>> ${1:ls} = new HashSet<>();\n$0\n" "HashSet<List<Integer>>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/hsli" nil nil)
                       ("hsl" "Set<Long> ${1:s} = new HashSet<>();\n$0\n" "HashSet<Long>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/hsl" nil nil)
                       ("hsi" "Set<Integer> ${1:s} = new HashSet<>();\n$0\n" "HashSet<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/hsi" nil nil)
                       ("hsc" "Set<Character> ${1:s} = new HashSet<>();\n$0\n" "HashSet<Character>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/hsc" nil nil)
                       ("hma" "Integer.MAX_VALUE / 2$0" "hma" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/hma" nil nil)
                       ("god" "${1:m}.getOrDefault($2, ${3:0})$0" "map.getOrDefault" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/god" nil nil)
                       ("gh" "System.out.println(\"${1:GotHere}\");\n$0" "system.out.println(\"got here\");" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/gh" nil nil)
                       ("g" "public ${1:int} get${2:Field}() {\n       return ${3:field};\n}" "getter" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/getter" nil nil)
                       ("fz" "f[x][y][z]$0" "f[x][y][z]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fz" nil nil)
                       ("fy" "f[x][y]$0" "f[x][y]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fy" nil nil)
                       ("fx" "f[x]$0" "f[x]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fx" nil nil)
                       ("fvo" "for (${1:int} ${2:v} : ${3:a}) $0" "for values() one line" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fvo" nil nil)
                       ("fv" "for (${1:int} ${2:v} : ${3:a}) {\n    $0\n}" "for values()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fv" nil nil)
                       ("ftn" "for (TreeNode ${1:prev} = $2) {\n    $0\n}\n" "ftn (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ftn" nil nil)
                       ("fsc" "for (String ${1:i} : ${2}) {\n    $0\n}\n" "for (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fsc" nil nil)
                       ("frc" "for (char ${1:i} = '${2:a}'; $1 <= '${3:z}'; $1++) {\n    $0\n}\n" "for (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/frc" nil nil)
                       ("fo" "for (int ${1:i} = ${2:0}; $1 < ${3:n}; $1++) {\n    $0\n}" "for" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fp" nil nil)
                       ("fit" "for (Iterator ${1:it} = $2.iterator(); $1.hasNext(); ) {\n    ${3:String} ${4:name} = ($3)$1.next();\n    $0\n}\n" "for (Iterator ...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/forit" nil nil)
                       ("fori" "for (${1:Object el} : ${2:iterator}) {\n    $0\n}\n" "fori" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fori" nil nil)
                       ("for" "for (${1:int i = 0}; ${2:i < N}; ${3:i++}) {\n    $0\n}" "for" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/for" nil nil)
                       ("fooc" "for (char ${1:c} = '${2:a}'; $1 <'${3:z}'; $1++) $0" "for (char i = ''; i < ''; i++) single line" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fooc" nil nil)
                       ("foo" "for (int ${1:i} = ${2:0}; $1 < ${3:n}; $1++) $0" "forOneLine" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/foo" nil nil)
                       ("foc" "for (char ${1:c} = '${2:a}'; $1 < '${3:z}'; $1++) {\n    $0\n}" "for (char i = ''; i < ''; i++)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/foc" nil nil)
                       ("fo" "for (int ${1:i} = ${2:0}; $1 < ${3:n}; $1++) {\n    $0\n}" "for" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fo" nil nil)
                       ("fmvk" "for (Map.Entry<${1:Integer, Integer}> en : ${2:m}.entrySet()) {\n    $3\n}$0" "for map ValueKey pair" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fmvk" nil nil)
                       ("fmv" "for (${1:int} ${2:val} : ${3:m}.values()) {\n    $3\n}$0" "for map values()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fmv" nil nil)
                       ("fmkv" "for (Map.Entry<${1:Integer, Integer}> en : ${2:m}.entrySet()) {\n    $3\n}$0" "for map KeyValue pair" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fmkv" nil nil)
                       ("fmk" "for (${1:int} key : ${2:m}.keySet()) {\n    $3\n}$0" "for map keySet" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fmk" nil nil)
                       ("fme" "for (Map.Entry<${1:Integer, Integer}> en : ${2:m}.entrySet()) {\n    $0\n}" "forMayEntrySet" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fme" nil nil)
                       ("fln" "for (ListNode ${1:prev} = $2) {\n    $0\n}\n" "fln (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fln" nil nil)
                       ("fkd" "f[k-1]$0" "f[k-1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fkd" nil nil)
                       ("fka" "f[k+1]$0" "f[k+1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fka" nil nil)
                       ("fk" "f[i][j][k]$0" "f[i][j][k]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fk" nil nil)
                       ("fjd" "f[j-1]$0" "f[j-1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fjd" nil nil)
                       ("fja" "f[j+1]$0" "f[j+1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fja" nil nil)
                       ("fj" "f[i][j]$0" "f[i][j]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fj" nil nil)
                       ("file" "public class ${1:`(file-name-base\n                    (or (buffer-file-name)\n                        (buffer-name)))`} {\n  $0\n}\n" "file_class" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/file_class" nil nil)
                       ("fii" "f[i][i]$0" "f[i][i]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fii" nil nil)
                       ("fid" "f[i-1]$0" "f[i-1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fid" nil nil)
                       ("fic" "for (int ${1:i} : ${2}) {\n    $0\n}" "for (int i : some) {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fic" nil nil)
                       ("fib" "for (Integer ${1:i} : ${2}) {\n    $0\n}" "for (Integer i : some) {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fib" nil nil)
                       ("fia" "f[i+1]$0" "f[i+1]Add" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fia" nil nil)
                       ("fi" "f[i]$0" "f[i]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fi" nil nil)
                       ("fdo" "for (int ${1:i} = ${2:n-1}; $1 >= ${3:0}; $1--) \n    $0" "for (int i = n-1)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fdo" nil nil)
                       ("fd" "for (int ${1:i} = ${2:n-1}; $1 >= ${3:0}; $1--) {\n    $0\n}" "for decreasing" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fd" nil nil)
                       ("fckat" "if (${1:map}.containsKey(${2:s}.charAt(${3}))) {\n    $0\n}" "if (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fckt" nil nil)
                       ("fck" "if (${1:map}.containsKey(${2})) {\n    $0\n}" "if (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fck" nil nil)
                       ("fcc" "for (Character ${1:i} : ${2}) {\n    $0\n}\n" "for (...) { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fcc" nil nil)
                       ("fa" "f[i+1]$0" "f[i+1]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/fa" nil nil)
                       ("extends" "extends $0" "extends" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/extends" nil nil)
                       ("eq" "equals(${1:s})$0" "equals" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/eq" nil nil)
                       ("ep" "System.out.println(${1:\"\"});\n$0" "system.out.println(\"got here\");" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ep" nil nil)
                       ("en" "== null$0" "EqualstoNull" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/en" nil nil)
                       ("em" " // <<<<<<<<<< $0" "commenting emphasis" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/em" nil nil)
                       ("el" " // <<<<<<<<<<<<<<<<<<<< $0" "commenting emphasis long" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/el" nil nil)
                       ("dvo" "Double.valueOf(${1:v});$0\n" "Double.valueOf()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dvo" nil nil)
                       ("dr" "int [][] dirs = {{1, 0}, {0, 1}, {0, -1}, {-1, 0}};$0\n" "dirs = {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dr" nil nil)
                       ("dqs" "Deque<String> ${1:q} = new ArrayDeque<>();\n$0\n" "Deque<String>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dqs" nil nil)
                       ("dqia" "Deque<int []> ${1:s} = new ArrayDeque<>();\n$0\n" "Deque<int []>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dqia" nil nil)
                       ("dqi" "Deque<Integer> ${1:q} = new ArrayDeque<>();\n$0\n" "Deque<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dqi" nil nil)
                       ("dqc" "Deque<Character> ${1:q} = new ArrayDeque<>();\n$0\n" "Deque<Character>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dqc" nil nil)
                       ("dpd" "Double.parseDouble(${1:s})$0" "Double.parseDouble()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dpd" nil nil)
                       ("/*" "/**\n * ${1:documentation}\n */" "doc" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/doc" nil nil)
                       ("do" "do {\n    $0\n} while (${1:condition});\n" "do { ... } while (...)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/do" nil nil)
                       ("dr" "int [][] dirs = {{1, 0}, {0, 1}, {0, -1}, {-1, 0}};$0\n" "dirs = {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dir" nil nil)
                       ("dc" "Double.compare(${1:v})$0" "Double.compare()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/dc" nil nil)
                       ("dqi" "ArrayDeque<Integer> ${1:q} = new ArrayDeque<>();\n$0\n" "Deque<Integer>" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/d" nil nil)
                       ("cuc" "Character.toUpperCase(${1})$0" "cuc" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cuc" nil nil)
                       ("ctu" "Character.toUpperCase(${1})$0" "Character.toUpperCase()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ctu" nil nil)
                       ("cts" "contains(${1:k})$0" "contains()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cts" nil nil)
                       ("ctl" "Character.toLowerCase(${1})$0" "Character.toLowerCase()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ctl" nil nil)
                       ("ct" "char [] ${1:s} = ${2:t}.toCharArray();$0" "char [] s = t.toCharArray()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ct" nil nil)
                       ("cst" "Collections.sort(${1:arr})$0" "Collections.sort()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cst" nil nil)
                       ("crri" "char [][] ${1:s} = {{'${2}','${3}','${4}'},{'${5}','${6}','${7}'},{'${8}','${9}','${10}'}};\n$0\n" "Char [][] ${1:s} = {$0};" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/crri" nil nil)
                       ("crr" "char [][] ${1:s} = {$0};\n" "Char [][] ${1:s} = {$0};" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/crr" nil nil)
                       ("cr" "Collections.reverse(${1:a})$0" "Collections.reverse()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cr" nil nil)
                       ("c" "public ${1:Class} (${2:args}) {\n       $0\n}" "constructor" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/constructor" nil nil)
                       ("cn" "continue;\n$0" "continue" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cn" nil nil)
                       ("cmv" "Collections.${1:max}(${2:m.values()})$0" "Collections.m()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cmv" nil nil)
                       ("/*r" "/**\n * ${1:name} - ${2:short description}\n * @param ${3:argv1} $4\n * @param ${5:argv2} $6\n * ${7:long description}\n * @return: $8\n */\n$0\n" "docblock" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cmtr" nil nil)
                       ("/**" "/**\n * ${1:name} - ${2:short description}\n * @param ${3:argv1} $4\n * @param ${5:argv2} $6\n * ${7:long description}\n */\n$0\n" "docblock" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cmt" nil nil)
                       ("cls" "class ${1:Class} {\n      $0\n}" "cls" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cls" nil nil)
                       ("cli" "Log.i(\"${1:Class}: \", \"${2:i}: \" + $2);\n    $0" "Log.iWithClass" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cli" nil nil)
                       ("cld" "Character.isLetterOrDigit(${1})$0" "cld" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cld" nil nil)
                       ("clc" "Character.toLowerCase(${1})$0" "clc" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/clc" nil nil)
                       ("class" "public class ${1:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`} {\n    $0\n}\n" "class { ... }" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/class" nil nil)
                       ("ck" "containsKey(${1:k})$0" "containsKey()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ck" nil nil)
                       ("ciw" "Character.isWhitespace(${1})$0" "Character.isWhitespace" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ciw" nil nil)
                       ("ciu" "Character.isUpperCase(${1})$0" "Character.isUpperCase()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ciu" nil nil)
                       ("cilt" "Character.isLetter(${1})$0" "Character.isLetter()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cilt" nil nil)
                       ("cil" "Character.isLowerCase(${1})$0" "Character.isLowerCase()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cil" nil nil)
                       ("cid" "Character.isDigit(${1})$0" "Character.isDigit" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cid" nil nil)
                       ("cia" "computeIfAbsent($1, z -> new ${2:ArrayList}<>()).add($3);\n$0\n" "computeIfAbsent" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cia" nil nil)
                       ("cd" "Character.isDigit(${1})$0" "cd" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/cd" nil nil)
                       ("ca" "char [] ${1:a} = new char [] {$2}; $0\n" "char [] a = new char [] {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ca" nil nil)
                       ("bt" "${1:root}.buildTree($1, ${2:a});\n$0" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/bt" nil nil)
                       ("bs" "toBinaryString(${1:s})$0" "toBinaryString()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/bs" nil nil)
                       ("bl" "${1:head}.buildList($1, ${2:a});\n$0" "print ListNode" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/bl" nil nil)
                       ("ba" "boolean [] ${1:a} = new boolean [] {$2};\n$0\n" "boolean [] a = new boolean [] {}" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ba" nil nil)
                       ("axy" "a[x][y]$0" "a[x][y]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/axy" nil nil)
                       ("ats" "Arrays.toString(${1:a})$0" "Arrays.toString()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ats" nil nil)
                       ("ass" "Arrays.stream(${1:arr}).sum()$0" "Arrays.stream().sum()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ass" nil nil)
                       ("asm" "Arrays.stream(${1:arr}).${2}().getAsInt()$0" "Arrays.stream().max()min" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/asm" nil nil)
                       ("asl" "Arrays.stream(${1:arr}).boxed().collect(Collectors.toList())$0" "Arrays.stream()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/asl" nil nil)
                       ("asf" "Arrays.stream($1).forEach(z -> Arrays.fill(z, $2));$0\n" "Arrays.stream(Arrays.fill)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/asf" nil nil)
                       ("asa" "Arrays.setAll(${1:v}, z -> $2);\n$0\n" "Arrays.setAll()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/asa" nil nil)
                       ("as" "Arrays.sort(${1:arr});$0" "Arrays.sort(arr)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/as" nil nil)
                       ("apr_assert" "if (Globals.useAssertions) {\n   ${1:assert ..};\n}\n" "apr_assert" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/apr_assert" nil nil)
                       ("ami" "Arrays.stream(${1:arr}).min().getAsInt()$0" "Arrays.stream().min()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ami" nil nil)
                       ("ama" "Arrays.stream(${1:arr}).max().getAsInt()$0" "Arrays.stream().max()min" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ama" nil nil)
                       ("aij" "a[i][j]$0" "a[i][j]" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/aij" nil nil)
                       ("af" "Arrays.fill(${1:v}, ${2:1});\n$0" "Arrays.fill" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/af" nil nil)
                       ("ac" "Arrays.copyOf(${1:arr}, ${2:n});\n$0\n" "Arrays.copyOf()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/ac" nil nil)
                       ("abs" "Arrays.binarySearch(${1:arr}, ${2:0}, ${3:n-1}, ${4:val});\n$0\n" "Arrays.binarySearch(arr)" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/abs" nil nil)
                       ("aal" "Arrays.asList(${1:arr})$0" "Arrays.asList()" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/aal" nil nil)
                       ("Thread" "Thread t = new Thread($1) {\n    public void run() {\n        $0\n    }\n}.start();\n" "Thread" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/Thread" nil nil)
                       ("Sta" "Stack<${1:String}> ${2:stack} = new Stack<$1>();\n$0\n" "Stack" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/Sta" nil nil)
                       ("Set" "HashSet<${1:String}> ${3:set} = new HashSet<$1>();\n$0\n" "Set" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/Set" nil nil)
                       ("sd" "sed -n '$1p' $2$0" "sed -n ',p' filename" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/Sd" nil nil)
                       ("Que" "Queue<${1:String}> ${2:q} = new LinkedList<$1>();\n$0\n" "Que" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/Que" nil nil)
                       ("Lint" "List<Integer> ${1:path} = new ArrayList<Integer>();\n$0\n" "List" nil nil nil "/Users/hhj/.emacs.d/snippets/java-mode/Lint" nil nil)))


;;; Do not edit! File generated at Wed Jul  5 11:30:21 2023
